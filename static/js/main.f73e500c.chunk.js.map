{"version":3,"sources":["data/catalog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","id","name","entry","link","useStyles","makeStyles","root","height","flexGrow","maxWidth","App","classes","style","marginTop","marginLeft","width","display","flexWrap","justifyContent","src","alt","verticalAlign","textDecoration","href","alignItems","color","TreeView","className","defaultCollapseIcon","defaultExpandIcon","defaultExpanded","TreeItem","key","nodeId","label","map","renderCatalog","onClick","e","window","location","preventDefault","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RA+CeA,G,MAlCO,CACpBC,GAAI,OACJC,KAAM,UACNC,MAAO,CACL,CACEF,GAAI,IACJC,KAAM,mBACNC,MAAO,CACL,CACEF,GAAI,MACJC,KAAM,uBACNE,KAAM,wBAER,CACEH,GAAI,MACJC,KAAM,gCACNE,KAAM,mBAIZ,CACEH,GAAI,IACJC,KAAM,WACNC,MAAO,CACL,CACEF,GAAI,MACJC,KAAM,4BACNE,KAAM,sBC9BVC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,IACRC,SAAU,EACVC,SAAU,OAmECC,MA/Df,WACE,IAAMC,EAAUP,IAahB,OACE,yBAAKQ,MAAO,CAACC,UAAU,MAAOC,WAAY,SACxC,yBAAKF,MAAO,CAACG,MAAO,OACNC,QAAS,OACTC,SAAU,OACVC,eAAgB,kBAE5B,yBAAKX,OAAO,KAAKY,IAAI,iFAAiFC,IAAI,SAC1G,yBAAKR,MAAO,CACVI,QAAS,OACTK,cAAe,SACfC,eAAgB,SAElB,2BAAG,2BACH,uBAAGC,KAAK,gFACEX,MAAO,CACLY,WAAY,SACZF,eAAgB,OAChBG,MAAO,UAJnB,eASA,uBAAGF,KAAK,4DACN,yBACEhB,OAAO,OACPY,IAAI,uEACJC,IAAI,cAKV,yBAAKR,MAAO,CAACC,UAAW,OAAQC,WAAY,SAC1C,kBAACY,EAAA,EAAD,CACEC,UAAWhB,EAAQL,KACnBsB,oBAAqB,kBAAC,IAAD,MACrBC,kBAAmB,kBAAC,IAAD,MACnBC,gBAAiB,CAAC,SAElB,kBAACC,EAAA,EAAD,CAAUC,IAAKjC,EAAKC,GAAIiC,OAAQlC,EAAKC,GAAIkC,MAAOnC,EAAKE,MACpDF,EAAKG,MAAMiC,KAAI,SAACjC,GAAD,OAnDF,SAAhBkC,EAAiBlC,GAAD,OACpB,kBAAC6B,EAAA,EAAD,CACEC,IAAK9B,EAAMF,GACXiC,OAAQ/B,EAAMF,GACdkC,MAAOhC,EAAMD,KACboC,QAAS,SAACC,GAAKpC,EAAMC,KAAKoC,OAAOC,SAASjB,KAAKrB,EAAMC,KAAKmC,EAAEG,mBAE3DvC,EAAMA,MAAMA,EAAMA,MAAMiC,KAAI,SAACG,GAAD,OAAKF,EAAcE,MAAI,MA4CTF,CAAclC,WC5D3CwC,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f73e500c.chunk.js","sourcesContent":["export interface CatalogEntry {\n  id: string,\n  name: string,\n  link?: string,\n  entry?: Array<CatalogEntry>,\n}\n\nexport interface Catalog {\n  id: string,\n  name: string,\n  entry: Array<CatalogEntry>,\n}\n\nconst data: Catalog = {\n  id: 'root',\n  name: 'Catalog',\n  entry: [\n    {\n      id: '1',\n      name: 'Computer Science',\n      entry: [\n        {\n          id: '1-1',\n          name: 'Open Source Projects',\n          link: 'docs/computerscience'\n        },\n        {\n          id: '1-2',\n          name: 'Books and Recommended Reading',\n          link: 'docs/readings'\n        }\n      ]\n    },\n    {\n      id: '2',\n      name: 'COVID-19',\n      entry: [\n        {\n          id: '2-1',\n          name: 'Papers, Code and Datasets',\n          link: 'docs/covid-19'\n        }\n      ]\n    }\n  ],\n};\n\nexport default data;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n//import logo from './logo.svg';\nimport './App.css';\nimport data, { CatalogEntry } from './data/catalog'\n\nconst useStyles = makeStyles({\n  root: {\n    height: 240,\n    flexGrow: 1,\n    maxWidth: 400,\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  const renderCatalog = (entry: CatalogEntry) => (\n    <TreeItem \n      key={entry.id}\n      nodeId={entry.id}\n      label={entry.name}\n      onClick={(e)=>{entry.link?window.location.href=entry.link:e.preventDefault()}}\n    >\n      {entry.entry?entry.entry.map((e)=>renderCatalog(e)):null}\n    </TreeItem>\n  );\n\n  return (\n    <div style={{marginTop:'4px', marginLeft: '24px'}}>\n      <div style={{width: '100%',\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    justifyContent: 'space-between'\n      }}>\n        <img height='50' src='https://cdac.uchicago.edu/wp-content/uploads/2019/09/CDAC_Logo_RGB_v01Full.svg' alt='CDAC' />\n        <div style={{\n          display: 'flex',\n          verticalAlign: 'center',\n          textDecoration: 'none',\n        }}>\n        <p><b>\n        <a href='https://github.com/ggmartins/resources/blob/master/index/src/data/catalog.tsx'\n                  style={{\n                    alignItems: 'center',\n                    textDecoration: 'none',\n                    color: 'black',\n                  }}>\n            Catalog |\n          </a>\n        </b></p>\n        <a href='https://github.com/ggmartins/resources/tree/master/index'>\n          <img\n            height='50px'\n            src='https://cdac-misc.s3.us-east-2.amazonaws.com/images/Ei-sc-github.svg'\n            alt='GitHub'\n          />\n        </a>\n        </div>\n      </div>\n      <div style={{marginTop: '10px', marginLeft: '10px'}}>\n        <TreeView\n          className={classes.root}\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n          defaultExpanded={['root']}\n        >\n          <TreeItem key={data.id} nodeId={data.id} label={data.name}>\n          {data.entry.map((entry: CatalogEntry)=>renderCatalog(entry))}\n          </TreeItem>\n        </TreeView>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}